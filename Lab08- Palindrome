import java.util.Scanner;

public class Lab08vst
{
	public static void main (String[] args)
	{
      Scanner input = new Scanner(System.in);
		boolean notFinished = false;
		do
		{
			System.out.print("Enter a string  ===>>  ");
			String str = input.nextLine();
			System.out.println();
			System.out.println("Entered String:     " + str);
			System.out.println("Palindrome:         " + Palindrome.isPal(str));
			System.out.println("Almost Palindrome:  " + Palindrome.almostPal(str));	  // used only for the 100 point version
			System.out.print("Do you wish to repeat this program [Y/N]?  ===>>  ");
			String repeat = input.nextLine();
			notFinished = (repeat.equals("Y")) || (repeat.equals("y"));
			System.out.println();
		}
		while (notFinished);
	}
}



class Palindrome
{
	/*
	 * Precondition:  s is an arbitrary String.
	 * Postcondition: The value of true is returned if s is a Palindrome, false otherwise.
    * Note:          >>>>> This method is required for both the 80 point and the 100 point versions  <<<<<
	 */
	
   public static boolean isPal(String s)
	{
      String str = s;
      String pal = str.toLowerCase();
      int length = pal.length();
      String opposite = "";
      for(int x = length - 1;x >= 0;x--)
      {
         opposite=opposite+pal.substring(x,x+1);
      }
      return opposite.equals(pal);
   }
   public static String isLetter(String s)
   {
      if(isPal(s))
      {
         return s;
      }
      String pal = s.toLowerCase();
      int length = pal.length();
      String opposite = "";
      for(int x = length - 1;x >= 0;x--)
      {
         opposite = opposite + pal.substring(x,x+1);
      }
      String least;
      for(int c = length - 1;c >= 0; c--)
      {
         least = pal + opposite.substring(c);
         int length2 = least.length();
         String opposite2 = "";
         for(int z = length2 - 1;z >= 0;z--)
         {
            opposite2 = opposite2 + least.charAt(z);
         }
         if(least.equals(opposite2))
            return least;
      }
      return "";
     }
   public static String purge(String s)
   {
      String str = s;
      String pal = str.toLowerCase();
      int length = pal.length();
      String purge = "";
      for(int x = 0;x <= length - 1;x++)
      {
         if(pal.charAt(x) <= 'z' && pal.charAt(x) >= 'a')
            purge=purge + pal.substring(x,x+1);
      }
      return purge;
   }
   public static boolean almostPal(String s)
   {
      return isPal(purge(s)); 
   }
   
}
/*int letters = s.length()/2;
      String first = s.substring(0,letters+1);
      String second = s.substring(letters+2);
      if(first.equals(second))
      return true;
      //else
      //return false;      // This statement is provided to allow initial compiling.
	}  
   
   /*
	 * Precondition:  s is a String of one character.
	 * Postcondition: The value of true is returned if s is a letter and false otherwise.
    * Note:          >>>>> This method is only completed for the 100 point version  <<<<<
	 */
  /* private static boolean isLetter(String letter)
   {
      return true;      // This statement is provided to allow initial compiling.
   }
   
	/*
	 * Precondition:  s is an arbitrary String.
	 * Postcondition: All non-letter characters are removed from s, and this "purged" String is returned.
    * Note:          >>>>> This method is only completed for the 100 point version  <<<<<
	 */
	/*private static String purge(String s)
	{
      return "";        // This statement is provided to allow initial compiling.
	}
   
   /*
	 * Precondition:  s is an arbitrary String.
	 * Postcondition: After purging all non-letter characters from s,
	 *                the value of true is returned if the resulting String is a Palindrome, false otherwise.
    * Note:          >>>>> This method is only completed for the 100 point version  <<<<<
	 */
	/*public static boolean almostPal(String s)
	{
      return true;      // This statement is provided to allow initial compiling.
	}

}*/
